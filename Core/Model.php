<?php

namespace Core;

/**
 * A single database record.
 * See {@link \Core\Extension} and {@link \Core\ModelDecorator}.
 *
 * @package core
 * @author dmoraschi
 */
abstract class Model extends Object implements ModelInterface
{   
    /**
     * Database field definitions.
     * This is a map from field names to field type. The field
	 * type should be a class that extends.
     * 
     * @var array
     */
    public static $dbFields = array(
        'id' => 'IntField',
    );
    
    /**
	 * Multidimensional array which inserts default data into the database
	 * on a db/build-call as long as the database-table is empty.
	 *
	 * Example:
	 * array(
	 * 	array('Title' => "DefaultPage1", 'PageTitle' => 'page1'),
	 * 	array('Title' => "DefaultPage2")
	 * ).
     * 
     * @todo still to implement this
	 * @var array
	 */
	public static $defaultRecords = null;
    
    /**
     * Add an extension to the Model.
     * 
     * @param string $extension
     */
    public static function addExtension($extension) 
    {
        $class = get_called_class();
        $extended = parent::addExtension($class, $extension);
        if ($extended) {
            // load statics for Model classes
            \Core\ModelDecorator::loadExtraStatics($class, $extension);
        }
    }
    
    /**
     * Scaffolded crud form generated by the available $dbFields.
     * To customize, overload this method in a subclass or decorate onto 
     * it by using {@link ModelDecorator->updateCrudForm()}.
     * 
     * @return mixed
     */
    public function getCrudForm() 
    {
        $fields = array_merge(self::$dbFields, static::$dbFields);
        $this->extend('updateCrudForm', $fields);
        
        return $fields;
    }
}